install.packages("rneos")
plot(cars)
install.packages("Rbitcoin")
library("Rbitcoin")
market <- "kraken"
currency_pair <- c("BTC","EUR")
ticker <- market.api.process(market, currency_pair, "ticker")
ticker
ticker
trades <- market.api.process(market,currency_pair,"trades")
trades
plot(trades$prices)
summary(trades)
summary(trades$trades$price
)
plot(trades$trades$price)
library("ts")
install.packages("forecast")
library("forecast")
?ts
ts.plot(trades$trades$price)
rbtc.plot(trades)
library("Rbitcoin")
?rbtc.plot
Rbitcoin.plot(trades)
trades <- market.api.process(market,currency_pair,"trades")
Rbitcoin.plot(trades)
trades <- market.api.process(market,currency_pair,"trades")
Rbitcoin.plot(trades)
trades <- market.api.process(market,currency_pair,"trades")
Rbitcoin.plot(trades)
order_book <- market.api.process(market,currency_pair,"order_book")
Rbitcoin.plot(order_book)
?diff
ts.plot(diff(trades$trades$price))
hist(diff(trades$trades$price))
ts.plot(diff(trades$trades$price))
auto.arima((trades$trades$price))
ARI<-auto.arima((trades$trades$price))
plot(ARI)
plot(ARI$fitted)
+ line(trades$trades$price)
plot(ARI$fitted) + lines(trades$trades$price, c = "Red")
plot(ARI$fitted) + lines(trades$trades$price, c ="red")
plot(ARI$fitted)
lines(trades$trades$price, c ="red")
plot(ARI$x,col="red")
lines(fitted(fit),col="blue")
lines(fitted(ARI),col="blue")
install.packages('telegram')
library('telegram')
R_TELEGRAM_BOT_RBot=481694595:AAGGuuiGVqDEU5wKpUPxCdG6tL13bD3L4QE
R_TELEGRAM_BOT_RBot="481694595:AAGGuuiGVqDEU5wKpUPxCdG6tL13bD3L4QE"
bot <- TGBot$new(token = bot_token('MrepettoBot'))
.Renviron
Sys.getenv()
Sys.getenv("HOME")
Sys.getenv(".Renviron")
Sys.getenv("R_HOME")
Sys.getenv("Renviron")
Sys.getenv("environ")
Sys.getenv("renviron")
library('telegram').Renviron
library('telegram')
bot <- TGBot$new(token = bot_token('MrepettoBot'))
library('telegram')
bot <- TGBot$new(token = bot_token('MrepettoBot'))
bot$getMe()
bot$getUpdates()
bot$set_default_chat_id(423034192)
bot$sendMessage('This is text')
a <- a + print("Ciao Bello")
a <- print("Ciao Bello")
a <- "Ciao Bello"
a <- paste("Ciao Bello", sep = "")
a <- paste("Ciao Bello", sep = "")
a <- a + paste("Ciao Bello", sep = "")
a <- ("Ciao Bello", a, sep = "")
a <- ("Ciao Bello", date(), sep = "")
a <- ("Ciao Bello", sep = "")
a <- ("Ciao Bello"; sep = "")
a <- paste("Ciao Bello"; sep = "")
a <- paste("Ciao Bello", sep = "")
a <- paste("Ciao Bello", a, sep = "")
a <- paste("Ciao Bello", sep = "")
a <- paste("Ciao Bello", sep = "", a)
a <- paste("Ciao Bello", a, sep = " ")
a <-""
a <- paste("Ciao Bello", a, sep = " ")
for (i in 1:100) {
a <- paste("Ciao Bello", a, sep = " ")
}
print(a)
bot$sendMessage(a)
a <-""
a <- paste("Ti amo pippi :3", a, sep = " ")
i<-0
a <-""
for (i in 1:1000) {
a <- paste("Ti amo pippi :3", a, sep = " ")
}
bot$sendMessage(a)
i<-0
a <-""
for (i in 1:100) {
a <- paste("Ti amo pippi :3", a, sep = " ")
}
bot$sendMessage(a)
i<-0
a <-""
for (i in 1:200) {
a <- paste("Ti amo pippi :3", a, sep = " ")
}
bot$sendMessage(a)
bot$getUpdates()
bot$set_default_chat_id(481694595)
i<-0
a <-""
for (i in 1:200) {
a <- paste("Ti amo pippi :3", a, sep = " ")
}
bot$sendMessage(a)
bot$set_default_chat_id(-264873481)
i<-0
a <-""
for (i in 1:200) {
a <- paste("Ti amo pippi :3", a, sep = " ")
}
bot$sendMessage(a)
library("rneos")
setwd("~/Documents/Git/ThMEF/R_script")
Nping()
oldw <- getOption("warn")
options(warn = -1)
template<-NgetSolverTemplate(category = "go", solvername = "BARON", inputMethod = "AMPL")
modf <- paste(paste(readLines("modelch2.mod"), collapse = "\n"), "\n")
datf <- paste(paste(readLines("modelch2.dat"), collapse = "\n"), "\n")
comf <- paste(paste(readLines("modelch2.run"), collapse = "\n"), "\n")
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94@me.com", interface = "", id = 0))
NgetJobStatus(obj = test)
NgetFinalResults(obj = test)
NgetFinalResults(obj = test)
template<-NgetSolverTemplate(category = "go", solvername = "BARON", inputMethod = "AMPL")
modf <- paste(paste(readLines("modelch2.mod"), collapse = "\n"), "\n")
datf <- paste(paste(readLines("modelch2.dat"), collapse = "\n"), "\n")
comf <- paste(paste(readLines("modelch2.run"), collapse = "\n"), "\n")
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94@me.com", interface = "", id = 0))
NgetJobStatus(obj = test)
NgetJobStatus(obj = test)
NgetFinalResults(obj = test)
modf <- paste(paste(readLines("modelch2.mod"), collapse = "\n"), "\n")
datf <- paste(paste(readLines("modelch2.dat"), collapse = "\n"), "\n")
comf <- paste(paste(readLines("modelch2.run"), collapse = "\n"), "\n")
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94@me.com", interface = "", id = 0))
NgetFinalResults(obj = test)
template<-NgetSolverTemplate(category = "go", solvername = "BARON", inputMethod = "AMPL")
modf <- paste(paste(readLines("modelch2.mod"), collapse = "\n"), "\n")
datf <- paste(paste(readLines("modelch2.dat"), collapse = "\n"), "\n")
comf <- paste(paste(readLines("modelch2.run"), collapse = "\n"), "\n")
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94@me.com", interface = "", id = 0))
NgetJobStatus(obj = test)
NgetFinalResults(obj = test)
template<-NgetSolverTemplate(category = "go", solvername = "BARON", inputMethod = "AMPL")
modf <- paste(paste(readLines("modelch2.mod"), collapse = "\n"), "\n")
datf <- paste(paste(readLines("modelch2.dat"), collapse = "\n"), "\n")
comf <- paste(paste(readLines("modelch2.run"), collapse = "\n"), "\n")
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94@me.com", interface = "", id = 0))
NgetFinalResults(obj = test)
modf <- paste(paste(readLines("modelch2.mod"), collapse = "\n"), "\n")
datf <- paste(paste(readLines("modelch2.dat"), collapse = "\n"), "\n")
comf <- paste(paste(readLines("modelch2.run"), collapse = "\n"), "\n")
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94@me.com", interface = "", id = 0))
NgetFinalResults(obj = test)
