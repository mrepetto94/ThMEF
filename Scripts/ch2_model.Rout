
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

During startup - Warning messages:
1: Setting LC_TIME failed, using "C" 
2: Setting LC_MONETARY failed, using "C" 
3: Setting LC_PAPER failed, using "C" 
4: Setting LC_MEASUREMENT failed, using "C" 
> 
> pricesimulation<-function (pzero, sigma, l){
+   initialPrice = pzero
+   dailyDeviation = sigma
+ 
+   n = 15 #number of days
+   
+   prices<-vector(mode = "numeric", length = l) 
+   
+   i <- 1
+   for(i in 1:l){  
+     prices[i] = initialPrice + cumsum(rnorm(n = n,mean = 0, sd = dailyDeviation))
+   }
+   return(prices)
+ }
> 
> demandsimulation<-function (lpl, mp, lpr, l){
+   demand <- rtriangle(l, lpl, lpr, mp)
+   return(demand)
+ }
> 
> 
> #Main script chapter 2 model
> #Using NEOS server for solving it
> library("rneos")
Loading required package: RCurl
Loading required package: bitops
Loading required package: XML
> library("fPortfolio")
Loading required package: timeDate
Loading required package: timeSeries
Loading required package: fBasics
Loading required package: fAssets
> library("telegram")
> library("here")
here() starts at /home/mrepetto94/R/Git/ThMEF
> library("ggplot2")
> library("triangle")
> 
> set.seed(200)
> 
> # Create the bot object
> bot <- TGBot$new(token = bot_token('RBot'))
> bot$set_default_chat_id(423034192)
> # Start routine
> setwd(here())
> # Turn off warnings (for XML package)
> options(warn = -1)
> # Ping the neos server
> Nping()
Note: the specification for S3 class “AsIs” in package ‘XMLRPC’ seems equivalent to one from package ‘jsonlite’: not turning on duplicate class definitions for this class.

NeosServer is alive

> 
> # Setting the number of simulations
> n <- 100
> 
> # Commodity data
> Price <- c(15,8,11,6) #price at time zero
> Volatility <-c(0.5,1,2,0.7) #volatility of the commodity on the reference market
> 
> # Initialize the matrix with the random prices and the result matrix
> symmat <- matrix(nrow = 4, ncol = n)
> symmat <- t(mapply(pricesimulation, Price, Volatility, ncol(symmat)))
> mainmat <- matrix(nrow = 4, ncol = n)
> 
> # Data File DECLARATION of unchanged variables
> D<-demandsimulation(2600, 3000, 3100, ncol(symmat)) #number of components
> ProcAct <- c(49, 52, 50, 55) #Variable cost based on the production activities
> demand <- c(1900, 1200, 1600, 600)
> cost = matrix(
+   c(0,	6,	8,	12,
+     6,	0,	3,	6,
+     8,	3,	0,	3,
+     12,	6,	3,	0),
+   nrow=4,
+   ncol=4,
+   byrow = TRUE)
> 
> 
> # Get the template for the solver
> template<-NgetSolverTemplate(category = "go", solvername = "BARON", inputMethod = "AMPL")
> 
> # Model File:
>   modf <- c(
+     "set ORIG := 1..4;",
+     "set DEST := 1..4;",
+     "param demand {DEST} >= 0;",
+     "param K;",
+     "param cost {ORIG,DEST} >= 0;",
+     "param ProcV {ORIG} >= 0;",
+     "check: K <= sum {j in DEST} demand[j];",
+     "var supply {ORIG} >= 0;",
+     "var Trans {ORIG,DEST} >= 0;",
+     "var Dev >= 0;",
+     "var Devp >= 0;",
+     "var supply2{ORIG} >= 0;",
+     "minimize Total_Deviation: Devp + Dev;",
+     "s.t. Inbound: sum {i in ORIG} ProcV[i] * supply[i] - Devp = 0;",
+     "s.t. Transport: sum {i in ORIG, j in DEST} cost[i,j] * Trans[i,j] - Dev = 0;",
+     "s.t. Supply {i in ORIG}: sum {j in DEST} Trans[i,j] = supply[i];",
+     "s.t. Demand {j in DEST}: sum {i in ORIG} Trans[i,j] <= demand[j];",
+     "s.t. Allocation: sum {i in ORIG} supply[i]= K;",
+     "s.t. Allocation2{i in ORIG}: sum {j in DEST} Trans[j,i] = supply2[i];"
+   )
> 
> # Run File:
>   comf <- c(
+     "solve;",
+     "display supply;"
+     #"option display_1col 0;",
+     #"display Trans;"
+   )
> 
> i <- 1
> for (i in 1:n){
+   ProcV <- ProcAct + symmat[,i] #add the price forcast to the other costs
+   K<-D[i]
+   
+   # Data File:
+   amplDataOpen("ampl") #clear the dat file
+   amplDataAddValue("K", K, "ampl")
+   amplDataAddVector("ProcV", ProcV, "ampl")
+   amplDataAddVector("demand", demand, "ampl")
+   amplDataAddMatrix("cost",cost ,"ampl")
+   # Write in the variable 
+   datf <- paste(paste(readLines("ampl.dat"), collapse = "\n"), "\n")
+ 
+   #Pass the AMPL files to the server
+   argslist <- list(model = modf, data = datf, commands = comf, comments = "")
+   xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
+   (test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94@me.com", interface = "", id = 0))
+ 
+   #cleaning the result
+   result <- NgetFinalResults(obj = test)
+   string <- sub(".*:=\n", "", result@ans)
+   string <- sub("\n;\n\n", "", string)
+   string <- gsub("\n", " ", string)
+   string <- gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", string, perl = TRUE)
+   string <- strsplit(string, " ")
+   string <- unlist(string)
+ 
+   mainmat[,i] <- as.numeric(matrix(string, ncol = 2, nrow = 4, byrow = TRUE)[,2])
+ 
+   if ( (i%%10) == 0){
+   bot$sendMessage(paste("Now processing number ", i))
+   }
+ 
+ }
> bot$sendMessage(paste("The process is complete, the files are in: ", here()))
> write.csv(mainmat, file = "mainmat.csv")
> storage.mode(mainmat) <- "numeric"
> 
> png("test.png")
> loc1 <- data.frame(allocation = mainmat[1,])
> loc2 <- data.frame(allocation = mainmat[2,])
> loc3 <- data.frame(allocation = mainmat[3,])
> loc4 <- data.frame(allocation = mainmat[4,])
> 
> loc1$name <- 'Location1'
> loc2$name <- 'Location2'
> loc3$name <- 'Location3'
> loc4$name <- 'Location4'
> 
> locations <- rbind(loc1, loc2, loc3, loc4)
> 
> ggplot(locations, aes(x=allocation, fill = name)) +
+   geom_histogram(aes(y= ..density..) ,alpha=0.6) +
+   geom_density(alpha = 0.5)
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> 
> dev.off()
null device 
          1 
> 
> bot$sendPhoto("test.png", caption = "Resulting histogram")
> 
> proc.time()
    user   system  elapsed 
  14.376    0.428 1636.433 
