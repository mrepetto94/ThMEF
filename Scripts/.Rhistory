"s.t. Supply {i in ORIG}: sum {j in DEST} Trans[i,j] = supply[i];",
"s.t. Demand {j in DEST}: sum {i in ORIG} Trans[i,j] <= demand[j];",
"s.t. Allocation: sum {i in ORIG} supply[i]= K;",
"s.t. Binarity{i in ORIG}: supply[i] <= 99999 * u1[i];",
"s.t. Allocation2{i in ORIG}: sum {j in DEST} Trans[j,i] = supply2[i];",
"s.t. Binarity1{i in ORIG}:	supply2[i] <= 99999 * u2[i];"
)
datf <- paste(paste(readLines("modelch2.dat"), collapse = "\n"), "\n")
# Data File:
comf <- paste(paste(readLines("modelch2.run"), collapse = "\n"), "\n")
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
oldw <- getOption("warn")
options(warn = -1)
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
options(warn = oldw)
(test <- NsubmitJob(xmlstring = xmls, user = mrepetto94@me.com, interface = "", id = 0))
Sys.sleep(20)
NgetJobStatus(obj = test)
?NsubmitJob
options(warn = -1)
NlistSolversInCategory(category = "lp")
template<-NgetSolverTemplate(category = "lp", solvername = "CPLEX", inputMethod = "AMPL")
#modf <- paste(paste(readLines("modelch2.mod"), collapse = "\n"), "\n")
# Model File:
modf <- c(
"set ORIG;",
"set DEST;",
"param demand {DEST} >= 0;",
"param K;",
"param cost {ORIG,DEST} >= 0;",
"param ProcV {ORIG} >= 0;",
"param ProcF {ORIG} >= 0;",
"check: K <= sum {j in DEST} demand[j];",
"var supply {ORIG} >= 0 integer;",
"var Trans {ORIG,DEST} >= 0 integer;",
"var Dev >= 0;",
"var Devp >= 0;",
"var u1{ORIG} binary;",
"var u2{ORIG} binary;",
"var supply2{ORIG} >= 0 integer;",
"minimize Total_Deviation: Devp + Dev;",
"s.t. Inbound: sum {i in ORIG} ProcV[i] * supply[i] + sum {i in ORIG} ProcF[i] * u1[i] - Devp = 0;",
"s.t. Transport: sum {i in ORIG, j in DEST} cost[i,j] * Trans[i,j] - Dev = 0;",
"s.t. Supply {i in ORIG}: sum {j in DEST} Trans[i,j] = supply[i];",
"s.t. Demand {j in DEST}: sum {i in ORIG} Trans[i,j] <= demand[j];",
"s.t. Allocation: sum {i in ORIG} supply[i]= K;",
"s.t. Binarity{i in ORIG}: supply[i] <= 99999 * u1[i];",
"s.t. Allocation2{i in ORIG}: sum {j in DEST} Trans[j,i] = supply2[i];",
"s.t. Binarity1{i in ORIG}:	supply2[i] <= 99999 * u2[i];"
)
datf <- paste(paste(readLines("modelch2.dat"), collapse = "\n"), "\n")
# Data File:
comf <- paste(paste(readLines("modelch2.run"), collapse = "\n"), "\n")
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94", interface = "", id = 0))
Sys.sleep(20)
NgetJobStatus(obj = test)
NgetFinalResults(obj = test)
template<-NgetSolverTemplate(category = "lp", solvername = "CPLEX", inputMethod = "AMPL")
#modf <- paste(paste(readLines("modelch2.mod"), collapse = "\n"), "\n")
# Model File:
modf <- c(
"set ORIG;",
"set DEST;",
"param demand {DEST} >= 0;",
"param K;",
"param cost {ORIG,DEST} >= 0;",
"param ProcV {ORIG} >= 0;",
"param ProcF {ORIG} >= 0;",
"check: K <= sum {j in DEST} demand[j];",
"var supply {ORIG} >= 0 integer;",
"var Trans {ORIG,DEST} >= 0 integer;",
"var Dev >= 0;",
"var Devp >= 0;",
"var u1{ORIG} binary;",
"var u2{ORIG} binary;",
"var supply2{ORIG} >= 0 integer;",
"minimize Total_Deviation: Devp + Dev;",
"s.t. Inbound: sum {i in ORIG} ProcV[i] * supply[i] + sum {i in ORIG} ProcF[i] * u1[i] - Devp = 0;",
"s.t. Transport: sum {i in ORIG, j in DEST} cost[i,j] * Trans[i,j] - Dev = 0;",
"s.t. Supply {i in ORIG}: sum {j in DEST} Trans[i,j] = supply[i];",
"s.t. Demand {j in DEST}: sum {i in ORIG} Trans[i,j] <= demand[j];",
"s.t. Allocation: sum {i in ORIG} supply[i]= K;",
"s.t. Binarity{i in ORIG}: supply[i] <= 99999 * u1[i];",
"s.t. Allocation2{i in ORIG}: sum {j in DEST} Trans[j,i] = supply2[i];",
"s.t. Binarity1{i in ORIG}:	supply2[i] <= 99999 * u2[i];"
)
datf <- paste(paste(readLines("modelch2.dat"), collapse = "\n"), "\n")
# Data File:
comf <- paste(paste(readLines("modelch2.run"), collapse = "\n"), "\n")
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "marco.repetto@studenti.unimi.it", interface = "", id = 0))
NgetJobStatus(obj = test)
NgetFinalResults(obj = test)
NlistSolversInCategory(category = "lp")
template<-NgetSolverTemplate(category = "lp", solvername = "MOSEK", inputMethod = "AMPL")
# Model File:
modf <- c(
"set ORIG;",
"set DEST;",
"param demand {DEST} >= 0;",
"param K;",
"param cost {ORIG,DEST} >= 0;",
"param ProcV {ORIG} >= 0;",
"param ProcF {ORIG} >= 0;",
"check: K <= sum {j in DEST} demand[j];",
"var supply {ORIG} >= 0 integer;",
"var Trans {ORIG,DEST} >= 0 integer;",
"var Dev >= 0;",
"var Devp >= 0;",
"var u1{ORIG} binary;",
"var u2{ORIG} binary;",
"var supply2{ORIG} >= 0 integer;",
"minimize Total_Deviation: Devp + Dev;",
"s.t. Inbound: sum {i in ORIG} ProcV[i] * supply[i] + sum {i in ORIG} ProcF[i] * u1[i] - Devp = 0;",
"s.t. Transport: sum {i in ORIG, j in DEST} cost[i,j] * Trans[i,j] - Dev = 0;",
"s.t. Supply {i in ORIG}: sum {j in DEST} Trans[i,j] = supply[i];",
"s.t. Demand {j in DEST}: sum {i in ORIG} Trans[i,j] <= demand[j];",
"s.t. Allocation: sum {i in ORIG} supply[i]= K;",
"s.t. Binarity{i in ORIG}: supply[i] <= 99999 * u1[i];",
"s.t. Allocation2{i in ORIG}: sum {j in DEST} Trans[j,i] = supply2[i];",
"s.t. Binarity1{i in ORIG}:	supply2[i] <= 99999 * u2[i];"
)
datf <- paste(paste(readLines("modelch2.dat"), collapse = "\n"), "\n")
# Data File:
comf <- paste(paste(readLines("modelch2.run"), collapse = "\n"), "\n")
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94", interface = "", id = 0))
NgetJobStatus(obj = test)
NgetFinalResults(obj = test)
template<-NgetSolverTemplate(category = "lp", solvername = "MOSEK", inputMethod = "AMPL")
# Model File:
modf <- c(
"set ORIG;",
"set DEST;",
"param demand {DEST} >= 0;",
"param K;",
"param cost {ORIG,DEST} >= 0;",
"param ProcV {ORIG} >= 0;",
"param ProcF {ORIG} >= 0;",
"check: K <= sum {j in DEST} demand[j];",
"var supply {ORIG} >= 0 integer;",
"var Trans {ORIG,DEST} >= 0 integer;",
"var Dev >= 0;",
"var Devp >= 0;",
"var u1{ORIG} binary;",
"var u2{ORIG} binary;",
"var supply2{ORIG} >= 0 integer;",
"minimize Total_Deviation: Devp + Dev;",
"s.t. Inbound: sum {i in ORIG} ProcV[i] * supply[i] + sum {i in ORIG} ProcF[i] * u1[i] - Devp = 0;",
"s.t. Transport: sum {i in ORIG, j in DEST} cost[i,j] * Trans[i,j] - Dev = 0;",
"s.t. Supply {i in ORIG}: sum {j in DEST} Trans[i,j] = supply[i];",
"s.t. Demand {j in DEST}: sum {i in ORIG} Trans[i,j] <= demand[j];",
"s.t. Allocation: sum {i in ORIG} supply[i]= K;",
"s.t. Binarity{i in ORIG}: supply[i] <= 99999 * u1[i];",
"s.t. Allocation2{i in ORIG}: sum {j in DEST} Trans[j,i] = supply2[i];",
"s.t. Binarity1{i in ORIG}:	supply2[i] <= 99999 * u2[i];"
)
datf <- paste(paste(readLines("modelch2.dat"), collapse = "\n"), "\n")
# Data File:
# Run File:
modf <- c(
"solve;",
"display Trans, supply2, u2;"
)
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94", interface = "", id = 0))
NgetJobStatus(obj = test)
NgetFinalResults(obj = test)
# Model File:
modf <- c(
"set ORIG;",
"set DEST;",
"param demand {DEST} >= 0;",
"param K;",
"param cost {ORIG,DEST} >= 0;",
"param ProcV {ORIG} >= 0;",
"param ProcF {ORIG} >= 0;",
"check: K <= sum {j in DEST} demand[j];",
"var supply {ORIG} >= 0 integer;",
"var Trans {ORIG,DEST} >= 0 integer;",
"var Dev >= 0;",
"var Devp >= 0;",
"var u1{ORIG} binary;",
"var u2{ORIG} binary;",
"var supply2{ORIG} >= 0 integer;",
"minimize Total_Deviation: Devp + Dev;",
"s.t. Inbound: sum {i in ORIG} ProcV[i] * supply[i] + sum {i in ORIG} ProcF[i] * u1[i] - Devp = 0;",
"s.t. Transport: sum {i in ORIG, j in DEST} cost[i,j] * Trans[i,j] - Dev = 0;",
"s.t. Supply {i in ORIG}: sum {j in DEST} Trans[i,j] = supply[i];",
"s.t. Demand {j in DEST}: sum {i in ORIG} Trans[i,j] <= demand[j];",
"s.t. Allocation: sum {i in ORIG} supply[i]= K;",
"s.t. Binarity{i in ORIG}: supply[i] <= 99999 * u1[i];",
"s.t. Allocation2{i in ORIG}: sum {j in DEST} Trans[j,i] = supply2[i];",
"s.t. Binarity1{i in ORIG}:	supply2[i] <= 99999 * u2[i];"
)
datf <- paste(paste(readLines("modelch2.dat"), collapse = "\n"), "\n")
# Run File:
modf <- c(
"solve;",
"display Trans, supply2, u2;"
)
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94", interface = "", id = 0))
NgetFinalResults(obj = test)
NlistSolversInCategory(category = "lp")
template<-NgetSolverTemplate(category = "lp", solvername = "MOSEK", inputMethod = "AMPL")
# Model File:
modf <- c(
"set ORIG;",
"set DEST;",
"param demand {DEST} >= 0;",
"param K;",
"param cost {ORIG,DEST} >= 0;",
"param ProcV {ORIG} >= 0;",
"param ProcF {ORIG} >= 0;",
"check: K <= sum {j in DEST} demand[j];",
"var supply {ORIG} >= 0 integer;",
"var Trans {ORIG,DEST} >= 0 integer;",
"var Dev >= 0;",
"var Devp >= 0;",
"var u1{ORIG} binary;",
"var u2{ORIG} binary;",
"var supply2{ORIG} >= 0 integer;",
"minimize Total_Deviation: Devp + Dev;",
"s.t. Inbound: sum {i in ORIG} ProcV[i] * supply[i] + sum {i in ORIG} ProcF[i] * u1[i] - Devp = 0;",
"s.t. Transport: sum {i in ORIG, j in DEST} cost[i,j] * Trans[i,j] - Dev = 0;",
"s.t. Supply {i in ORIG}: sum {j in DEST} Trans[i,j] = supply[i];",
"s.t. Demand {j in DEST}: sum {i in ORIG} Trans[i,j] <= demand[j];",
"s.t. Allocation: sum {i in ORIG} supply[i]= K;",
"s.t. Binarity{i in ORIG}: supply[i] <= 99999 * u1[i];",
"s.t. Allocation2{i in ORIG}: sum {j in DEST} Trans[j,i] = supply2[i];",
"s.t. Binarity1{i in ORIG}:	supply2[i] <= 99999 * u2[i];"
)
datf <- paste(paste(readLines("modelch2.dat"), collapse = "\n"), "\n")
# Data File:
# Run File:
comf <- c(
"solve;",
"display Trans, supply2, u2;"
)
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94", interface = "", id = 0))
NgetFinalResults(obj = test)
#Main script chapter 2 model
#Using NEOS server for solving it
library("rneos")
setwd("~/Documents/Git/ThMEF/R_script")
options(warn = -1)
Nping()
NlistSolversInCategory(category = "lp")
template<-NgetSolverTemplate(category = "lp", solvername = "MOSEK", inputMethod = "AMPL")
# Model File:
modf <- c(
"set ORIG;",
"set DEST;",
"param demand {DEST} >= 0;",
"param K;",
"param cost {ORIG,DEST} >= 0;",
"param ProcV {ORIG} >= 0;",
"param ProcF {ORIG} >= 0;",
"check: K <= sum {j in DEST} demand[j];",
"var supply {ORIG} >= 0 integer;",
"var Trans {ORIG,DEST} >= 0 integer;",
"var Dev >= 0;",
"var Devp >= 0;",
"var u1{ORIG} binary;",
"var u2{ORIG} binary;",
"var supply2{ORIG} >= 0 integer;",
"minimize Total_Deviation: Devp + Dev;",
"s.t. Inbound: sum {i in ORIG} ProcV[i] * supply[i] + sum {i in ORIG} ProcF[i] * u1[i] - Devp = 0;",
"s.t. Transport: sum {i in ORIG, j in DEST} cost[i,j] * Trans[i,j] - Dev = 0;",
"s.t. Supply {i in ORIG}: sum {j in DEST} Trans[i,j] = supply[i];",
"s.t. Demand {j in DEST}: sum {i in ORIG} Trans[i,j] <= demand[j];",
"s.t. Allocation: sum {i in ORIG} supply[i]= K;",
"s.t. Binarity{i in ORIG}: supply[i] <= 99999 * u1[i];",
"s.t. Allocation2{i in ORIG}: sum {j in DEST} Trans[j,i] = supply2[i];",
"s.t. Binarity1{i in ORIG}:	supply2[i] <= 99999 * u2[i];"
)
datf <- paste(paste(readLines("modelch2.dat"), collapse = "\n"), "\n")
# Data File:
# Run File:
comf <- c(
"solve;",
"display supply2, u2;",
"display_1col Trans"
)
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94", interface = "", id = 0))
NgetJobStatus(obj = test)
NgetFinalResults(obj = test)
#Main script chapter 2 model
#Using NEOS server for solving it
library("rneos")
setwd("~/Documents/Git/ThMEF/R_script")
options(warn = -1)
#Nping()
#NlistSolversInCategory(category = "lp")
template<-NgetSolverTemplate(category = "lp", solvername = "MOSEK", inputMethod = "AMPL")
# Model File:
modf <- c(
"set ORIG;",
"set DEST;",
"param demand {DEST} >= 0;",
"param K;",
"param cost {ORIG,DEST} >= 0;",
"param ProcV {ORIG} >= 0;",
"param ProcF {ORIG} >= 0;",
"check: K <= sum {j in DEST} demand[j];",
"var supply {ORIG} >= 0 integer;",
"var Trans {ORIG,DEST} >= 0 integer;",
"var Dev >= 0;",
"var Devp >= 0;",
"var u1{ORIG} binary;",
"var u2{ORIG} binary;",
"var supply2{ORIG} >= 0 integer;",
"minimize Total_Deviation: Devp + Dev;",
"s.t. Inbound: sum {i in ORIG} ProcV[i] * supply[i] + sum {i in ORIG} ProcF[i] * u1[i] - Devp = 0;",
"s.t. Transport: sum {i in ORIG, j in DEST} cost[i,j] * Trans[i,j] - Dev = 0;",
"s.t. Supply {i in ORIG}: sum {j in DEST} Trans[i,j] = supply[i];",
"s.t. Demand {j in DEST}: sum {i in ORIG} Trans[i,j] <= demand[j];",
"s.t. Allocation: sum {i in ORIG} supply[i]= K;",
"s.t. Binarity{i in ORIG}: supply[i] <= 99999 * u1[i];",
"s.t. Allocation2{i in ORIG}: sum {j in DEST} Trans[j,i] = supply2[i];",
"s.t. Binarity1{i in ORIG}:	supply2[i] <= 99999 * u2[i];"
)
datf <- paste(paste(readLines("modelch2.dat"), collapse = "\n"), "\n")
# Data File:
# Run File:
comf <- c(
"solve;",
"option display_1col 0",
"display Trans, supply2, u2;"
)
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94", interface = "", id = 0))
NgetJobStatus(obj = test)
NgetFinalResults(obj = test)
#Main script chapter 2 model
#Using NEOS server for solving it
library("rneos")
setwd("~/Documents/Git/ThMEF/R_script")
options(warn = -1)
#Nping()
#NlistSolversInCategory(category = "lp")
template<-NgetSolverTemplate(category = "lp", solvername = "MOSEK", inputMethod = "AMPL")
# Model File:
modf <- c(
"set ORIG;",
"set DEST;",
"param demand {DEST} >= 0;",
"param K;",
"param cost {ORIG,DEST} >= 0;",
"param ProcV {ORIG} >= 0;",
"param ProcF {ORIG} >= 0;",
"check: K <= sum {j in DEST} demand[j];",
"var supply {ORIG} >= 0 integer;",
"var Trans {ORIG,DEST} >= 0 integer;",
"var Dev >= 0;",
"var Devp >= 0;",
"var u1{ORIG} binary;",
"var u2{ORIG} binary;",
"var supply2{ORIG} >= 0 integer;",
"minimize Total_Deviation: Devp + Dev;",
"s.t. Inbound: sum {i in ORIG} ProcV[i] * supply[i] + sum {i in ORIG} ProcF[i] * u1[i] - Devp = 0;",
"s.t. Transport: sum {i in ORIG, j in DEST} cost[i,j] * Trans[i,j] - Dev = 0;",
"s.t. Supply {i in ORIG}: sum {j in DEST} Trans[i,j] = supply[i];",
"s.t. Demand {j in DEST}: sum {i in ORIG} Trans[i,j] <= demand[j];",
"s.t. Allocation: sum {i in ORIG} supply[i]= K;",
"s.t. Binarity{i in ORIG}: supply[i] <= 99999 * u1[i];",
"s.t. Allocation2{i in ORIG}: sum {j in DEST} Trans[j,i] = supply2[i];",
"s.t. Binarity1{i in ORIG}:	supply2[i] <= 99999 * u2[i];"
)
datf <- paste(paste(readLines("modelch2.dat"), collapse = "\n"), "\n")
# Data File:
# Run File:
comf <- c(
"solve;",
"display supply2, u2;",
"option display_1col 0;",
"display Trans, supply2, u2;"
)
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94", interface = "", id = 0))
NgetJobStatus(obj = test)
NgetFinalResults(obj = test)
#Main script chapter 2 model
#Using NEOS server for solving it
library("rneos")
setwd("~/Documents/Git/ThMEF/R_script")
options(warn = -1)
#Nping()
#NlistSolversInCategory(category = "lp")
template<-NgetSolverTemplate(category = "lp", solvername = "MOSEK", inputMethod = "AMPL")
# Model File:
modf <- c(
"set ORIG;",
"set DEST;",
"param demand {DEST} >= 0;",
"param K;",
"param cost {ORIG,DEST} >= 0;",
"param ProcV {ORIG} >= 0;",
"check: K <= sum {j in DEST} demand[j];",
"var supply {ORIG} >= 0 integer;",
"var Trans {ORIG,DEST} >= 0 integer;",
"var Dev >= 0;",
"var Devp >= 0;",
"var supply2{ORIG} >= 0 integer;",
"minimize Total_Deviation: Devp + Dev;",
"s.t. Inbound: sum {i in ORIG} ProcV[i] * supply[i] + sum {i in ORIG} ProcF[i] * u1[i] - Devp = 0;",
"s.t. Transport: sum {i in ORIG, j in DEST} cost[i,j] * Trans[i,j] - Dev = 0;",
"s.t. Supply {i in ORIG}: sum {j in DEST} Trans[i,j] = supply[i];",
"s.t. Demand {j in DEST}: sum {i in ORIG} Trans[i,j] <= demand[j];",
"s.t. Allocation: sum {i in ORIG} supply[i]= K;",
"s.t. Allocation2{i in ORIG}: sum {j in DEST} Trans[j,i] = supply2[i];"
)
datf <- paste(paste(readLines("modelch2.dat"), collapse = "\n"), "\n")
# Data File:
# Run File:
comf <- c(
"solve;",
"display supply, supply2;",
"option display_1col 0;",
"display Trans;"
)
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94", interface = "", id = 0))
NgetJobStatus(obj = test)
NgetFinalResults(obj = test)
#Main script chapter 2 model
#Using NEOS server for solving it
library("rneos")
setwd("~/Documents/Git/ThMEF/R_script")
options(warn = -1)
#Nping()
#NlistSolversInCategory(category = "lp")
template<-NgetSolverTemplate(category = "lp", solvername = "MOSEK", inputMethod = "AMPL")
# Model File:
modf <- c(
"set ORIG;",
"set DEST;",
"param demand {DEST} >= 0;",
"param K;",
"param cost {ORIG,DEST} >= 0;",
"param ProcV {ORIG} >= 0;",
"check: K <= sum {j in DEST} demand[j];",
"var supply {ORIG} >= 0 integer;",
"var Trans {ORIG,DEST} >= 0 integer;",
"var Dev >= 0;",
"var Devp >= 0;",
"var supply2{ORIG} >= 0 integer;",
"minimize Total_Deviation: Devp + Dev;",
"s.t. Inbound: sum {i in ORIG} ProcV[i] * supply[i] - Devp = 0;",
"s.t. Transport: sum {i in ORIG, j in DEST} cost[i,j] * Trans[i,j] - Dev = 0;",
"s.t. Supply {i in ORIG}: sum {j in DEST} Trans[i,j] = supply[i];",
"s.t. Demand {j in DEST}: sum {i in ORIG} Trans[i,j] <= demand[j];",
"s.t. Allocation: sum {i in ORIG} supply[i]= K;",
"s.t. Allocation2{i in ORIG}: sum {j in DEST} Trans[j,i] = supply2[i];"
)
datf <- paste(paste(readLines("modelch2.dat"), collapse = "\n"), "\n")
# Data File:
# Run File:
comf <- c(
"solve;",
"display supply, supply2;",
"option display_1col 0;",
"display Trans;"
)
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94", interface = "", id = 0))
NgetJobStatus(obj = test)
NgetFinalResults(obj = test)
amplDataAdd(K, 200, type = "value", "ampl")
amplDataAdd("K", 200, type = "value", "ampl")
amplDataShow("ampl")
amplDataOpen("ampl")
amplDataAdd("K", 200, type = "value", "ampl")
Col1 <- c (0, 27, 24, 10)
Col2 <- c (27, 0, 12, 22)
Col1 <- c (24, 14, 0, 12)
Col1 <- c (0, 27, 24, 10)
Col3 <- c (24, 14, 0, 12)
Col4 <- c (10, 13, 3, 0)
data.frame(Col1, Col2, Col3, Col4)
df <- data.frame(Col1, Col2, Col3, Col4), row.names(c("Col1", "Col2", "Col3", "Col4"))
df <- data.frame(Col1, Col2, Col3, Col4), row.names(c("Col1", "Col2", "Col3", "Col4")))
df <- data.frame((Col1, Col2, Col3, Col4), row.names(c("Col1", "Col2", "Col3", "Col4")))
df <- data.frame((Col1, Col2, Col3, Col4), row.names("Col1", "Col2", "Col3", "Col4"))
df <- data.frame((Col1, Col2, Col3, Col4), row.names= c("Col1", "Col2", "Col3", "Col4"))
df <- data.frame((Col1, Col2, Col3, Col4), row.names()
df <- data.frame((Col1, Col2, Col3, Col4), row.names())
df <- data.frame((Col1, Col2, Col3, Col4))
df <- data.frame(Col1, Col2, Col3, Col4)
df <- data.frame(Col1, Col2, Col3, Col4, row.names = c("Col1", "Col2", "Col3", "Col4"))
df
amplDataAdd("cost", df, type = "matrix", "ampl")
amplDataAddMatrix("cost", df, "ampl")
amplDataAddMatrix("cost", df, "ampl")
amplDataAddMatrix("cost", df, "ampl")
amplDataAddMatrix("cost", df, "ampl")
amplDataAdd("cost", df, type = "matrix", "ampl")
