setwd("~/ThMEF/Scripts")
###########
# The script creates 3 parts of the model in chapter 2, namely the .dat the .mod and the .run files
# Then wrap it in an XML object and send it to neos server
####################################################################################################
getresult <- function (result, name, nc, nr){
k<-1
if(nc >= 2){k=2}
var <- paste(name, " ", sep = "")
resultvec <-unlist(strsplit(result@ans, "\n"))
location <- grep(var, resultvec)
value <- resultvec[(location+k):(location+nr+k-1)]
value <- gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", value, perl = TRUE)
value <- paste(value,collapse=" ")
mat<-matrix(scan(text= value), nrow = nr, ncol = nc+1, byrow = TRUE)
mat<-mat[,-1]
return(mat)
}# The function isolate a specific parameter from the solution response in NEOS
library("rneos")
library("ggplot2")
# Ping the neos server
Nping()
# Get the template for the solver
template<-NgetSolverTemplate(category = "go", solvername = "BARON", inputMethod = "AMPL")
# Model File:
modf <- paste(paste(readLines("AMPLmodel/ampl.mod"), collapse = "\n"), "\n")
# Run File
comf <- paste(paste(readLines("AMPLmodel/ampl.run"), collapse = "\n"), "\n")
# Data File
datf <- paste(paste(readLines("AMPLmodel/ampl.dat"), collapse = "\n"), "\n")
#Pass the AMPL files to the server
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94@me.com", interface = "", id = 0))
result <- NgetFinalResults(test)
result
###########
# The script creates 3 parts of the model in chapter 2, namely the .dat the .mod and the .run files
# Then wrap it in an XML object and send it to neos server
####################################################################################################
getresult <- function (result, name, nc, nr){
k<-1
if(nc >= 2){k=2}
var <- paste(name, " ", sep = "")
resultvec <-unlist(strsplit(result@ans, "\n"))
location <- grep(var, resultvec)
value <- resultvec[(location+k):(location+nr+k-1)]
value <- gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", value, perl = TRUE)
value <- paste(value,collapse=" ")
mat<-matrix(scan(text= value), nrow = nr, ncol = nc+1, byrow = TRUE)
mat<-mat[,-1]
return(mat)
}# The function isolate a specific parameter from the solution response in NEOS
library("rneos")
library("ggplot2")
# Ping the neos server
Nping()
# Get the template for the solver
template<-NgetSolverTemplate(category = "go", solvername = "BARON", inputMethod = "AMPL")
# Model File:
modf <- paste(paste(readLines("AMPLmodel/ampl.mod"), collapse = "\n"), "\n")
# Run File
comf <- paste(paste(readLines("AMPLmodel/ampl.run"), collapse = "\n"), "\n")
# Data File
datf <- paste(paste(readLines("AMPLmodel/ampl.dat"), collapse = "\n"), "\n")
#Pass the AMPL files to the server
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94@me.com", interface = "", id = 0))
result <- NgetFinalResults(test)
result
###########
# The script creates 3 parts of the model in chapter 2, namely the .dat the .mod and the .run files
# Then wrap it in an XML object and send it to neos server
####################################################################################################
getresult <- function (result, name, nc, nr){
k<-1
if(nc >= 2){k=2}
var <- paste(name, " ", sep = "")
resultvec <-unlist(strsplit(result@ans, "\n"))
location <- grep(var, resultvec)
value <- resultvec[(location+k):(location+nr+k-1)]
value <- gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", value, perl = TRUE)
value <- paste(value,collapse=" ")
mat<-matrix(scan(text= value), nrow = nr, ncol = nc+1, byrow = TRUE)
mat<-mat[,-1]
return(mat)
}# The function isolate a specific parameter from the solution response in NEOS
library("rneos")
library("ggplot2")
# Ping the neos server
Nping()
# Get the template for the solver
template<-NgetSolverTemplate(category = "go", solvername = "BARON", inputMethod = "AMPL")
# Model File:
modf <- paste(paste(readLines("AMPLmodel/ampl.mod"), collapse = "\n"), "\n")
# Run File
comf <- paste(paste(readLines("AMPLmodel/ampl.run"), collapse = "\n"), "\n")
# Data File
datf <- paste(paste(readLines("AMPLmodel/ampl.dat"), collapse = "\n"), "\n")
#Pass the AMPL files to the server
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94@me.com", interface = "", id = 0))
result <- NgetFinalResults(test)
result
###########
# The script creates 3 parts of the model in chapter 2, namely the .dat the .mod and the .run files
# Then wrap it in an XML object and send it to neos server
####################################################################################################
getresult <- function (result, name, nc, nr){
k<-1
if(nc >= 2){k=2}
var <- paste(name, " ", sep = "")
resultvec <-unlist(strsplit(result@ans, "\n"))
location <- grep(var, resultvec)
value <- resultvec[(location+k):(location+nr+k-1)]
value <- gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", value, perl = TRUE)
value <- paste(value,collapse=" ")
mat<-matrix(scan(text= value), nrow = nr, ncol = nc+1, byrow = TRUE)
mat<-mat[,-1]
return(mat)
}# The function isolate a specific parameter from the solution response in NEOS
library("rneos")
library("ggplot2")
# Ping the neos server
Nping()
# Get the template for the solver
template<-NgetSolverTemplate(category = "go", solvername = "BARON", inputMethod = "AMPL")
# Model File:
modf <- paste(paste(readLines("AMPLmodel/ampl.mod"), collapse = "\n"), "\n")
# Run File
comf <- paste(paste(readLines("AMPLmodel/ampl.run"), collapse = "\n"), "\n")
# Data File
datf <- paste(paste(readLines("AMPLmodel/ampl.dat"), collapse = "\n"), "\n")
#Pass the AMPL files to the server
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94@me.com", interface = "", id = 0))
result <- NgetFinalResults(test)
result
###########
# The script creates 3 parts of the model in chapter 2, namely the .dat the .mod and the .run files
# Then wrap it in an XML object and send it to neos server
####################################################################################################
getresult <- function (result, name, nc, nr){
k<-1
if(nc >= 2){k=2}
var <- paste(name, " ", sep = "")
resultvec <-unlist(strsplit(result@ans, "\n"))
location <- grep(var, resultvec)
value <- resultvec[(location+k):(location+nr+k-1)]
value <- gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", value, perl = TRUE)
value <- paste(value,collapse=" ")
mat<-matrix(scan(text= value), nrow = nr, ncol = nc+1, byrow = TRUE)
mat<-mat[,-1]
return(mat)
}# The function isolate a specific parameter from the solution response in NEOS
library("rneos")
library("ggplot2")
# Ping the neos server
Nping()
# Get the template for the solver
template<-NgetSolverTemplate(category = "go", solvername = "BARON", inputMethod = "AMPL")
# Model File:
modf <- paste(paste(readLines("AMPLmodel/ampl.mod"), collapse = "\n"), "\n")
# Run File
comf <- paste(paste(readLines("AMPLmodel/ampl.run"), collapse = "\n"), "\n")
# Data File
datf <- paste(paste(readLines("AMPLmodel/ampl.dat"), collapse = "\n"), "\n")
#Pass the AMPL files to the server
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94@me.com", interface = "", id = 0))
result <- NgetFinalResults(test)
result
###########
# The script creates 3 parts of the model in chapter 2, namely the .dat the .mod and the .run files
# Then wrap it in an XML object and send it to neos server
####################################################################################################
getresult <- function (result, name, nc, nr){
k<-1
if(nc >= 2){k=2}
var <- paste(name, " ", sep = "")
resultvec <-unlist(strsplit(result@ans, "\n"))
location <- grep(var, resultvec)
value <- resultvec[(location+k):(location+nr+k-1)]
value <- gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", value, perl = TRUE)
value <- paste(value,collapse=" ")
mat<-matrix(scan(text= value), nrow = nr, ncol = nc+1, byrow = TRUE)
mat<-mat[,-1]
return(mat)
}# The function isolate a specific parameter from the solution response in NEOS
library("rneos")
library("ggplot2")
# Ping the neos server
Nping()
# Get the template for the solver
template<-NgetSolverTemplate(category = "go", solvername = "BARON", inputMethod = "AMPL")
# Model File:
modf <- paste(paste(readLines("AMPLmodel/ampl.mod"), collapse = "\n"), "\n")
# Run File
comf <- paste(paste(readLines("AMPLmodel/ampl.run"), collapse = "\n"), "\n")
# Data File
datf <- paste(paste(readLines("AMPLmodel/ampl.dat"), collapse = "\n"), "\n")
#Pass the AMPL files to the server
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94@me.com", interface = "", id = 0))
result <- NgetFinalResults(test)
result
###########
# The script creates 3 parts of the model in chapter 2, namely the .dat the .mod and the .run files
# Then wrap it in an XML object and send it to neos server
####################################################################################################
getresult <- function (result, name, nc, nr){
k<-1
if(nc >= 2){k=2}
var <- paste(name, " ", sep = "")
resultvec <-unlist(strsplit(result@ans, "\n"))
location <- grep(var, resultvec)
value <- resultvec[(location+k):(location+nr+k-1)]
value <- gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", value, perl = TRUE)
value <- paste(value,collapse=" ")
mat<-matrix(scan(text= value), nrow = nr, ncol = nc+1, byrow = TRUE)
mat<-mat[,-1]
return(mat)
}# The function isolate a specific parameter from the solution response in NEOS
library("rneos")
library("ggplot2")
# Ping the neos server
Nping()
# Get the template for the solver
template<-NgetSolverTemplate(category = "go", solvername = "BARON", inputMethod = "AMPL")
# Model File:
modf <- paste(paste(readLines("AMPLmodel/ampl.mod"), collapse = "\n"), "\n")
# Run File
comf <- paste(paste(readLines("AMPLmodel/ampl.run"), collapse = "\n"), "\n")
# Data File
datf <- paste(paste(readLines("AMPLmodel/ampl.dat"), collapse = "\n"), "\n")
#Pass the AMPL files to the server
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94@me.com", interface = "", id = 0))
result <- NgetFinalResults(test)
result
###########
# The script creates 3 parts of the model in chapter 2, namely the .dat the .mod and the .run files
# Then wrap it in an XML object and send it to neos server
####################################################################################################
getresult <- function (result, name, nc, nr){
k<-1
if(nc >= 2){k=2}
var <- paste(name, " ", sep = "")
resultvec <-unlist(strsplit(result@ans, "\n"))
location <- grep(var, resultvec)
value <- resultvec[(location+k):(location+nr+k-1)]
value <- gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", value, perl = TRUE)
value <- paste(value,collapse=" ")
mat<-matrix(scan(text= value), nrow = nr, ncol = nc+1, byrow = TRUE)
mat<-mat[,-1]
return(mat)
}# The function isolate a specific parameter from the solution response in NEOS
library("rneos")
library("ggplot2")
# Ping the neos server
Nping()
# Get the template for the solver
template<-NgetSolverTemplate(category = "go", solvername = "BARON", inputMethod = "AMPL")
# Model File:
modf <- paste(paste(readLines("AMPLmodel/ampl.mod"), collapse = "\n"), "\n")
# Run File
comf <- paste(paste(readLines("AMPLmodel/ampl.run"), collapse = "\n"), "\n")
# Data File
datf <- paste(paste(readLines("AMPLmodel/ampl.dat"), collapse = "\n"), "\n")
#Pass the AMPL files to the server
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94@me.com", interface = "", id = 0))
result <- NgetFinalResults(test)
result
###########
# The script creates 3 parts of the model in chapter 2, namely the .dat the .mod and the .run files
# Then wrap it in an XML object and send it to neos server
####################################################################################################
getresult <- function (result, name, nc, nr){
k<-1
if(nc >= 2){k=2}
var <- paste(name, " ", sep = "")
resultvec <-unlist(strsplit(result@ans, "\n"))
location <- grep(var, resultvec)
value <- resultvec[(location+k):(location+nr+k-1)]
value <- gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", value, perl = TRUE)
value <- paste(value,collapse=" ")
mat<-matrix(scan(text= value), nrow = nr, ncol = nc+1, byrow = TRUE)
mat<-mat[,-1]
return(mat)
}# The function isolate a specific parameter from the solution response in NEOS
library("rneos")
library("ggplot2")
# Ping the neos server
Nping()
# Get the template for the solver
template<-NgetSolverTemplate(category = "go", solvername = "BARON", inputMethod = "AMPL")
# Model File:
modf <- paste(paste(readLines("AMPLmodel/ampl.mod"), collapse = "\n"), "\n")
# Run File
comf <- paste(paste(readLines("AMPLmodel/ampl.run"), collapse = "\n"), "\n")
# Data File
datf <- paste(paste(readLines("AMPLmodel/ampl.dat"), collapse = "\n"), "\n")
#Pass the AMPL files to the server
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94@me.com", interface = "", id = 0))
result <- NgetFinalResults(test)
result
###########
# The script creates 3 parts of the model in chapter 2, namely the .dat the .mod and the .run files
# Then wrap it in an XML object and send it to neos server
####################################################################################################
getresult <- function (result, name, nc, nr){
k<-1
if(nc >= 2){k=2}
var <- paste(name, " ", sep = "")
resultvec <-unlist(strsplit(result@ans, "\n"))
location <- grep(var, resultvec)
value <- resultvec[(location+k):(location+nr+k-1)]
value <- gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", value, perl = TRUE)
value <- paste(value,collapse=" ")
mat<-matrix(scan(text= value), nrow = nr, ncol = nc+1, byrow = TRUE)
mat<-mat[,-1]
return(mat)
}# The function isolate a specific parameter from the solution response in NEOS
library("rneos")
library("ggplot2")
# Ping the neos server
Nping()
# Get the template for the solver
template<-NgetSolverTemplate(category = "go", solvername = "BARON", inputMethod = "AMPL")
# Model File:
modf <- paste(paste(readLines("AMPLmodel/ampl.mod"), collapse = "\n"), "\n")
# Run File
comf <- paste(paste(readLines("AMPLmodel/ampl.run"), collapse = "\n"), "\n")
# Data File
datf <- paste(paste(readLines("AMPLmodel/ampl.dat"), collapse = "\n"), "\n")
#Pass the AMPL files to the server
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94@me.com", interface = "", id = 0))
result <- NgetFinalResults(test)
result
###########
# The script creates 3 parts of the model in chapter 2, namely the .dat the .mod and the .run files
# Then wrap it in an XML object and send it to neos server
####################################################################################################
getresult <- function (result, name, nc, nr){
k<-1
if(nc >= 2){k=2}
var <- paste(name, " ", sep = "")
resultvec <-unlist(strsplit(result@ans, "\n"))
location <- grep(var, resultvec)
value <- resultvec[(location+k):(location+nr+k-1)]
value <- gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", value, perl = TRUE)
value <- paste(value,collapse=" ")
mat<-matrix(scan(text= value), nrow = nr, ncol = nc+1, byrow = TRUE)
mat<-mat[,-1]
return(mat)
}# The function isolate a specific parameter from the solution response in NEOS
library("rneos")
library("ggplot2")
# Ping the neos server
Nping()
# Get the template for the solver
template<-NgetSolverTemplate(category = "go", solvername = "BARON", inputMethod = "AMPL")
# Model File:
modf <- paste(paste(readLines("AMPLmodel/ampl.mod"), collapse = "\n"), "\n")
# Run File
comf <- paste(paste(readLines("AMPLmodel/ampl.run"), collapse = "\n"), "\n")
# Data File
datf <- paste(paste(readLines("AMPLmodel/ampl.dat"), collapse = "\n"), "\n")
#Pass the AMPL files to the server
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94@me.com", interface = "", id = 0))
result <- NgetFinalResults(test)
result
###########
# The script creates 3 parts of the model in chapter 2, namely the .dat the .mod and the .run files
# Then wrap it in an XML object and send it to neos server
####################################################################################################
getresult <- function (result, name, nc, nr){
k<-1
if(nc >= 2){k=2}
var <- paste(name, " ", sep = "")
resultvec <-unlist(strsplit(result@ans, "\n"))
location <- grep(var, resultvec)
value <- resultvec[(location+k):(location+nr+k-1)]
value <- gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", value, perl = TRUE)
value <- paste(value,collapse=" ")
mat<-matrix(scan(text= value), nrow = nr, ncol = nc+1, byrow = TRUE)
mat<-mat[,-1]
return(mat)
}# The function isolate a specific parameter from the solution response in NEOS
library("rneos")
library("ggplot2")
# Ping the neos server
Nping()
# Get the template for the solver
template<-NgetSolverTemplate(category = "go", solvername = "BARON", inputMethod = "AMPL")
# Model File:
modf <- paste(paste(readLines("AMPLmodel/ampl.mod"), collapse = "\n"), "\n")
# Run File
comf <- paste(paste(readLines("AMPLmodel/ampl.run"), collapse = "\n"), "\n")
# Data File
datf <- paste(paste(readLines("AMPLmodel/ampl.dat"), collapse = "\n"), "\n")
#Pass the AMPL files to the server
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94@me.com", interface = "", id = 0))
result <- NgetFinalResults(test)
result
###########
# The script creates 3 parts of the model in chapter 2, namely the .dat the .mod and the .run files
# Then wrap it in an XML object and send it to neos server
####################################################################################################
getresult <- function (result, name, nc, nr){
k<-1
if(nc >= 2){k=2}
var <- paste(name, " ", sep = "")
resultvec <-unlist(strsplit(result@ans, "\n"))
location <- grep(var, resultvec)
value <- resultvec[(location+k):(location+nr+k-1)]
value <- gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", value, perl = TRUE)
value <- paste(value,collapse=" ")
mat<-matrix(scan(text= value), nrow = nr, ncol = nc+1, byrow = TRUE)
mat<-mat[,-1]
return(mat)
}# The function isolate a specific parameter from the solution response in NEOS
library("rneos")
library("ggplot2")
# Ping the neos server
Nping()
# Get the template for the solver
template<-NgetSolverTemplate(category = "go", solvername = "BARON", inputMethod = "AMPL")
# Model File:
modf <- paste(paste(readLines("AMPLmodel/ampl.mod"), collapse = "\n"), "\n")
# Run File
comf <- paste(paste(readLines("AMPLmodel/ampl.run"), collapse = "\n"), "\n")
# Data File
datf <- paste(paste(readLines("AMPLmodel/ampl.dat"), collapse = "\n"), "\n")
#Pass the AMPL files to the server
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94@me.com", interface = "", id = 0))
result <- NgetFinalResults(test)
result
