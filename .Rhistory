set.seed(5)
initialPrice = 100
dailyVariance = 10
dailyDeviation = dailyVariance/2
n = 31 #number of days
N = 500 #number of simulations
prices = matrix(ncol=N,nrow=n)
for(i in 1:N){
prices[,i] = initialPrice +
cumsum(rnorm(n = n,mean = 0,sd = dailyDeviation))
}
View(prices)
n = 31 #number of days
N = 1 #number of simulations
prices = matrix(ncol=N,nrow=n)
for(i in 1:N){
prices[,i] = initialPrice +
cumsum(rnorm(n = n,mean = 0,sd = dailyDeviation))
}
n = 15 #number of days
N = 100 #number of simulations
prices = matrix(ncol=N,nrow=n)
for(i in 1:N){
prices[,i] = initialPrice +
cumsum(rnorm(n = n,mean = 0,sd = dailyDeviation))
}
steps = 1:nrow(prices)
yLimits = c(initialPrice-dailyDeviation*n/1.5,
initialPrice+dailyDeviation*n/1.5)
plot(steps,prices[,1],type='l',
ylim=yLimits,xlab='Days',
ylab='Daily Price ($)',
main='Simulation of Daily Prices for the Month')
for(i in 2:ncol(prices)){
lines(prices[,i])
}
?vector
set.seed(5)
initialPrice = 100
dailyVariance = 10
dailyDeviation = dailyVariance/2
n = 15 #number of days
prices = vector(mode = "any", length = 15)
prices = initialPrice + cumsum(rnorm(n = n,mean = 0,sd = dailyDeviation))
prices = vector(mode = "numeric", length = 15)
prices = initialPrice + cumsum(rnorm(n = n,mean = 0,sd = dailyDeviation))
?geom_density
setwd("~/Documents/Git/ThMEF/Scripts")
mainmat <- read.csv(file = "mainmat.csv")
loc1 <- data.frame(rnorm(100, mean = 2000, sd = 1))
loc2 <- data.frame(rnorm(100, mean = 1900, sd = 3))
loc3 <- data.frame(rnorm(100, mean = 2050, sd = 2))
loc4 <- data.frame(rnorm(100, mean = 2100, sd = 0.5))
loc1$name <- 'Location1'
loc2$name <- 'Location2'
loc3$name <- 'Location3'
loc4$name <- 'Location4'
locations <- rbind(loc1, loc2, loc3, loc4)
locations <- rbind(loc1, loc2, loc3, loc4)
rbind(loc1, loc2, loc3, loc4)
loc1 <- data.frame(length = rnorm(100, mean = 2000, sd = 1))
loc2 <- data.frame(length = rnorm(100, mean = 1900, sd = 3))
loc3 <- data.frame(length = rnorm(100, mean = 2050, sd = 2))
loc4 <- data.frame(length = rnorm(100, mean = 2100, sd = 0.5))
loc1$name <- 'Location1'
loc2$name <- 'Location2'
loc3$name <- 'Location3'
loc4$name <- 'Location4'
locations <- rbind(loc1, loc2, loc3, loc4)
ggplot(locations, aes(length, fill = name))
library(ggplot2)
ggplot(locations, aes(length, fill = name))
ggplot(locations, aes(length, fill = name)) + geom_density()
qplot(locations, aes(length, fill = name), geom="histogram")
ggplot(locations, aes(x=length, color=name)) +
geom_histogram(fill="white", alpha=0.5, position="identity")
ggplot(locations, aes(x=length, fill = name)) +
geom_histogram( alpha=0.5, position="identity")
ggplot(locations, aes(x=length, fill = name)) +
geom_histogram( alpha=0.5, position="identity") +
stat_bin(binwidth = 10)
ggplot(locations, aes(x=length, fill = name)) +
geom_histogram( alpha=0.5, position="identity") +
stat_bin(binwidth = 1)
ggplot(locations, aes(x=length, fill = name)) +
stat_bin(binwidth = 1) +
geom_histogram( alpha=0.5, position="identity")
ggplot(locations, aes(x=length, fill = name)) +
geom_histogram( alpha=0.5, position="identity", binwidth = 1)
ggplot(locations, aes(x=length, fill = name)) +
geom_histogram( alpha=0.5, position="identity", binwidth = 1) +
geom_density()
ggplot(locations, aes(x=length, fill = name)) +
geom_histogram( alpha=0.5, position="identity", binwidth = 10) +
geom_density()
ggplot(locations, aes(x=length, fill = name)) +
geom_histogram( alpha=0.5, position="identity", binwidth = 10) +
geom_density(alpha=0.5)
ggplot(locations, aes(x=length, fill = name)) +
geom_histogram( alpha=0.5, position="identity", binwidth = 10) +
geom_density(alpha=.5)
ggplot(locations, aes(x=length, fill = name)) +
geom_histogram( alpha=0.5, position="identity", binwidth = 10) +
geom_density(alpha=10)
ggplot(locations, aes(x=length, fill = name)) +
geom_histogram( alpha=0.5, position="identity", binwidth = 10) +
geom_density(alpha=.2)
ggplot(locations, aes(x=length, fill = name)) +
geom_histogram( alpha=0.5, position="identity", binwidth = 1)
ggplot(locations, aes(x=length, fill = name)) +
geom_histogram( position="identity", binwidth = 1)
ggplot(locations, aes(x=length, fill = name)) +
geom_histogram( alpha=0.5, position="identity", binwidth = 1)
ggplot(locations, aes(x=length, fill = name)) +
geom_histogram( alpha=0.2, position="identity", binwidth = 1)
ggplot(locations, aes(x=length, fill = name)) +
geom_histogram( alpha=0.8, position="identity", binwidth = 1)
ggplot(locations, aes(x=length, fill = name)) +
geom_histogram( alpha=0.6, position="identity", binwidth = 1)
pricesimulation<-function (pzero, sigma){
initialPrice = pzero
dailyDeviation = sigma
n = 15 #number of days
prices = vector(mode = "numeric", length = 15)
prices = initialPrice + cumsum(rnorm(n = n,mean = 0,sd = dailyDeviation))
return(prices)
}
#Main script chapter 2 model
#Using NEOS server for solving it
library("rneos")
library("fPortfolio")
library("telegram")
library("here")
library("ggplot2")
## Create the bot object
bot <- TGBot$new(token = bot_token('RBot'))
bot$set_default_chat_id(423034192)
setwd(here())
options(warn = -1)
Nping()
n <- 10
mainmat <- matrix(nrow = 4, ncol = n)
i <- 1
template<-NgetSolverTemplate(category = "lp", solvername = "MOSEK", inputMethod = "AMPL")
# Model File:
modf <- c(
"set ORIG := 1..4;",
"set DEST := 1..4;",
"param demand {DEST} >= 0;",
"param K;",
"param cost {ORIG,DEST} >= 0;",
"param ProcV {ORIG} >= 0;",
"check: K <= sum {j in DEST} demand[j];",
"var supply {ORIG} >= 0 integer;",
"var Trans {ORIG,DEST} >= 0 integer;",
"var Dev >= 0;",
"var Devp >= 0;",
"var supply2{ORIG} >= 0 integer;",
"minimize Total_Deviation: Devp + Dev;",
"s.t. Inbound: sum {i in ORIG} ProcV[i] * supply[i] - Devp = 0;",
"s.t. Transport: sum {i in ORIG, j in DEST} cost[i,j] * Trans[i,j] - Dev = 0;",
"s.t. Supply {i in ORIG}: sum {j in DEST} Trans[i,j] = supply[i];",
"s.t. Demand {j in DEST}: sum {i in ORIG} Trans[i,j] <= demand[j];",
"s.t. Allocation: sum {i in ORIG} supply[i]= K;",
"s.t. Allocation2{i in ORIG}: sum {j in DEST} Trans[j,i] = supply2[i];"
)
# Run File:
comf <- c(
"solve;",
"display supply;"
#"option display_1col 0;",
#"display Trans;"
)
for (i in 1:n){
# Data File:
amplDataOpen("ampl") #clear the dat file
K<-2660
amplDataAddValue("K", K, "ampl")
ProcV <- c(49, 52, 50, 55) #fixed part of variable cost
Price <- c(15,8,11,6) #medium price of commodity
Volatility <-c(0.5,1,2,0.7) #volatility of the commodity on the reference market
#Simulate ProcV as brownian motion
Priceforecast <- pricesimulation(10, 0.5)
Priceforecast <- mapply(pricesimulation, Price, Volatility)
orderlag <- 15 #the time in when we'll do the order
ProcV <- ProcV + Priceforecast[orderlag,] #add the price forcast to the other costs
demand <- c(1900, 1200, 1600, 600)
amplDataAddVector("ProcV", ProcV, "ampl")
amplDataAddVector("demand", demand, "ampl")
cost = matrix(
c(0, 14, 11, 14,
27, 0, 12, 22,
24, 14, 0, 12,
10, 13, 3, 0),
nrow=4,
ncol=4,
byrow = TRUE)
amplDataAddMatrix("cost",cost ,"ampl")
datf <- paste(paste(readLines("ampl.dat"), collapse = "\n"), "\n")
argslist <- list(model = modf, data = datf, commands = comf, comments = "")
xmls <- CreateXmlString(neosxml = template, cdatalist = argslist)
(test <- NsubmitJob(xmlstring = xmls, user = "mrepetto94", interface = "", id = 0))
#cleaning the result
result <- NgetFinalResults(obj = test)
string <- sub(".*:=\n", "", result@ans)
string <- sub("\n;\n\n", "", string)
string <- gsub("\n", " ", string)
string <- gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", string, perl = TRUE)
string <- strsplit(string, " ")
string <- unlist(string)
mat <- matrix(string, nrow = 4, ncol = 2, byrow = TRUE)
mainmat[,i] <- mat[,2]
if ( (i%%10) == 0){
bot$sendMessage(paste("Now processing number ", i))
}
Sys.sleep(5)
}
bot$sendMessage(paste("The process is complete, the files are in: ", here()))
write.csv(mainmat, file = "mainmat.csv")
storage.mode(mainmat) <- "numeric"
png("test.png")
loc1 <- data.frame(length = mainmat[1,])
loc2 <- data.frame(length = mainmat[2,])
loc3 <- data.frame(length = mainmat[3,])
loc4 <- data.frame(length = mainmat[4,])
loc1$name <- 'Location1'
loc2$name <- 'Location2'
loc3$name <- 'Location3'
loc4$name <- 'Location4'
locations <- rbind(loc1, loc2, loc3, loc4)
ggplot(locations, aes(x=length, fill = name)) +
geom_histogram( alpha=0.6, position="identity", binwidth = 1)
dev.off()
bot$sendPhoto("test.png", caption = "Resulting histogram")
